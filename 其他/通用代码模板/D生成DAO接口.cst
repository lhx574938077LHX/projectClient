<%@ CodeTemplate Language="C#" TargetLanguage="Java" Description="3.生成Model类" %>
<%@ XmlProperty Name="CommonEntity" Schema="CommonEntity.xsd" Optional="True"  Default="TableEntity.xml" Description="实体类对象XML描述文档" %>
<%@ Property Name="EntityName" Type="System.String" Optional="True" Category="Context" Description="实体类名" %>
<%@ Map Name="ORACLEJAVAMap" Src="Oracle-Java.csmap" Default="__UNKNOWTYPE__" Description="Oracle数据类型对应C#数据类型映射表" %>

<%@ Assembly Src="Common.cs" %>
<%@ Import Namespace="Com.IceFox.Utils" %>

<%
    foreach(Entity entity in CommonEntity.Entities)
    {
        if(entity.Name == EntityName)
        {
%>
package <%=entity.Namespace%>.dao<%=String.IsNullOrEmpty(entity.SubPackage)?"":"." + entity.SubPackage%>;

import java.util.List;
import java.util.Map;

import <%=entity.Namespace%>.model.<%=String.IsNullOrEmpty(entity.SubPackage)?"":entity.SubPackage + "."%><%=Common.ConvertOTJ(entity.Name)%>;

public interface <%=Common.ConvertOTJ(entity.Name)%>Mapper {
    long deleteByPrimaryKey(Long id);
	
	long deleteByCondition(String condition);
	
    long insert(<%=Common.ConvertOTJ(entity.Name)%> record);

    long insertSelective(<%=Common.ConvertOTJ(entity.Name)%> record);

    <%=Common.ConvertOTJ(entity.Name)%> selectByPrimaryKey(Long id);

    long updateByPrimaryKeySelective(<%=Common.ConvertOTJ(entity.Name)%> record);

    long updateByPrimaryKey(<%=Common.ConvertOTJ(entity.Name)%> record);
    
    List<<%=Common.ConvertOTJ(entity.Name)%>> selectList(Map<String,String> paramMap);
    
    long selectCount ( String condition);
    
    <%=Common.ConvertOTJ(entity.Name)%> selectOne ( String condition);
    
    long updateByCondition(Map<String,String> paramMap);
}
<%
        }
    }
%>

<script runat="template">
    /// <summary>
    /// 获取字段大小和精度定义
    /// </summary>
    /// <param name="Property">属性类对象</param>
    /// <returns>返回字段大小和精度定义</returns>
    public static string GetColumnSize(Property property)
    {
        string tmpstr = "";
        
        switch(property.DbType)
        {
            case "NCHAR":
                tmpstr += "(" + property.Size + " BYTE)";
                break;
            case "NUMBER":
                tmpstr += "(" + property.Precision + "," + property.Scale + ")";
                break;
            case "NVARCHAR2":
                tmpstr += "(" + property.Size + " BYTE)";
                break;
            case "VARCHAR2":
                tmpstr += "(" + property.Size + " BYTE)";
                break;
			case "BFILE":
            case "BLOB":
            case "CHAR":
            case "CLOB":
            case "DATE":
            case "FLOAT":
            case "INTEGER":
            case "LONG":
            case "NCLOB":
            case "RAW":
            case "ROWID":
            case "UROWID":
            case "TIMESTAMP":
            default:
                break;
        }
        return tmpstr;
    }
    
    /// <summary>
    /// 返回指定字段的JdbcTtype
    /// </summary>
    /// <param name="properties">字段属性集合</param>
    /// <param name="fieldName">字段名</param>
    /// <returns></returns>
    public static string GetFieldJdbcType(PropertyCollection properties,string fieldName)
    {
        for(int i=0;i<properties.Count;i++){
            if(fieldName == properties[i].Name)
            {
                return properties[i].DbType;
            }
        }
        
        return "___UNKNOWFIELD___";
    }
    
    /// <summary>
    /// 返回指定字段的JavaTtype
    /// </summary>
    /// <param name="properties">字段属性集合</param>
    /// <param name="fieldName">字段名</param>
    /// <returns></returns>
    public static string GetFieldJavaType(PropertyCollection properties,string fieldName)
    {
        for(int i=0;i<properties.Count;i++){
            if(fieldName == properties[i].Name)
            {
                return properties[i].JavaType;
            }
        }
        
        return "___UNKNOWFIELD___";
    }
</script>